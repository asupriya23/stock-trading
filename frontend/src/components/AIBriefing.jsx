import React, { useState } from 'react';
import { Brain, RefreshCw, Loader2, ChevronDown, ChevronUp } from 'lucide-react';

const AIBriefing = ({ briefing }) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  const handleRefresh = async () => {
    setRefreshing(true);
    // In a real app, this would call the refresh function from context
    setTimeout(() => setRefreshing(false), 2000);
  };

  if (!briefing) return null;

  return (
    <div className="glass-card border border-white/10 rounded-xl p-6">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <Brain className="h-6 w-6 text-blue-300" />
          <h3 className="text-lg font-semibold text-white">AI Daily Briefing</h3>
          <span className="text-sm text-white/60">
            {new Date(briefing.date).toLocaleDateString()}
          </span>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={handleRefresh}
            disabled={refreshing}
            className="p-2 text-white/60 hover:text-white disabled:opacity-50"
            title="Refresh briefing"
          >
            {refreshing ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <RefreshCw className="h-4 w-4" />
            )}
          </button>
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="p-2 text-white/60 hover:text-white"
          >
            {isExpanded ? (
              <ChevronUp className="h-4 w-4" />
            ) : (
              <ChevronDown className="h-4 w-4" />
            )}
          </button>
        </div>
      </div>

      {isExpanded && (
        <div>
          <div className="mb-4">
            <p className="text-sm text-white/70">
              Analysis for <span className="font-medium">{briefing.watchlist_name}</span> watchlist
            </p>
            <p className="text-xs text-white/60">
              Stocks analyzed: {briefing.stocks_analyzed?.join(', ') || 'None'}
            </p>
          </div>

          <div className="space-y-3">
            {briefing.summary && briefing.summary.length > 0 ? (
              briefing.summary.map((point, index) => (
                <div key={index} className="flex items-start space-x-3">
                  <div className="flex-shrink-0 w-2 h-2 bg-blue-400 rounded-full mt-2"></div>
                  <p className="text-sm text-white/80 leading-relaxed">{point}</p>
                </div>
              ))
            ) : (
              <div className="text-sm text-white/60 italic">
                No analysis available. Add stocks to your watchlist to get AI insights.
              </div>
            )}
          </div>

          {briefing.summary && briefing.summary.length > 0 && (
            <div className="mt-4 pt-4 border-t border-white/10">
              <p className="text-xs text-white/50">
                This briefing is generated by AI and should not be considered as financial advice. 
                Always do your own research before making investment decisions.
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default AIBriefing;
